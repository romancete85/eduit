pipeline {
    environment {
        registry = "romanfandrich/alien-tetris"
        registryCredential = 'dockerD'
        dockerImage = ''
    }
    agent any
    stages {
        stage('Clone git') {
            steps {
                // Clonar el repositorio
                git url: 'https://github.com/romancete85/eduit.git', branch: 'Jenkins'
            }
        }
        stage('Hadolint') {
            steps {
                script {
                    // Use Docker to run Hadolint
                    def hadolintStatus = bat(returnStatus: true, script: 'docker run --rm -i hadolint/hadolint < Dockerfile')
                    if (hadolintStatus != 0) {
                        echo "Hadolint found issues with the Dockerfile"
                    }
                }
            }
        }
        stage('BUILD Image') {
            steps {
                script {
                    // Construir la imagen Docker
                    dockerImage = docker.build registry + ":${BUILD_NUMBER}"
                }
            }
        }
        stage('Deploy image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Run Container') {
            steps {
                script {
                    bat "docker run -d --name alien-tetris-test -p 8055:80 ${registry}:${BUILD_NUMBER}"
                    //bat "docker run -d --name alien-tetris-test ${registry}:${BUILD_NUMBER}"
                }
            }
        }
        stage('App Test') {
            steps {
                script {
                    // Add application-specific tests here
                    bat 'curl http://localhost:8055'
                    // Stop and remove the container after tests
                    bat 'docker stop alien-tetris-test'
                    bat 'docker rm alien-tetris-test'
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    bat "docker rmi ${registry}:${BUILD_NUMBER}"
                }
            }
        }
    }
}


-----------------------

pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker')
        DOCKERHUB_REPO = 'romanfandrich/tu-repositorio'
    }
    stages {
        stage('Checkout') {
            steps {
                // Clonar el repositorio
                git url: 'https://github.com/romancete85/eduit.git', branch: 'main'
            }
        }
        stage('Linting') {
            steps {
                script {
                    // Ejecutar Hadolint para verificar el Dockerfile
                    bat 'docker run --rm -i hadolint/hadolint < Dockerfile'
                }
            }
        }
        stage('Build Image') {
            steps {
                script {
                    // Construir la imagen Docker
                    bat 'docker build -t %DOCKERHUB_REPO%:%BUILD_NUMBER% .'
                }
            }
        }
        stage('Run Container') {
            steps {
                script {
                    // Detener y eliminar cualquier contenedor en ejecución con el mismo nombre
                    bat 'docker stop romanfandrich/alien-tetris || true && docker rm my-container || true'
                    // Ejecutar el contenedor
                    bat 'docker run -d --tetris romanfandrich/alien-tetris %DOCKERHUB_REPO%:%BUILD_NUMBER%'
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    // Ejecutar pruebas básicas
                    bat 'docker exec romanfandrich/alien-tetris cmd /c "echo Pruebas ejecutadas exitosamente"'
                }
            }
        }
        stage('Push to DockerHub') {
            steps {
                script {
                    // Iniciar sesión en DockerHub y subir la imagen
                    bat "echo %DOCKERHUB_CREDENTIALS_PSW% | docker login -u %DOCKERHUB_CREDENTIALS_USR% --password-stdin"
                    bat "docker push %DOCKERHUB_REPO%:%BUILD_NUMBER%"
                }
            }
        }
    }
    post {
        always {
            script {
                // Limpiar contenedor después de la ejecución
                bat 'docker stop romanfandrich/alien-tetris || true && docker rm romanfandrich/alien-tetris || true'
            }
        }
    }
}
